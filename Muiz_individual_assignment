#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>

#define MAX_CHILDREN 4
int child_pids[MAX_CHILDREN];

void handle_interrupt(int sig) {
    printf("\nThis Message has been Interrupt!\n");
    for (int i = 0; i < MAX_CHILDREN; i++) {
        if (child_pids[i] > 0) {
            kill(child_pids[i], SIGTERM);
        }
    }
    exit(0);
}



int main()
{
    int i;
    int fd[2];
    pid_t child_pid[MAX_CHILDREN];
    char message[256];


    signal(SIGINT, handle_interrupt);


    if (pipe(fd) == -1)
    {
        perror("Pipe creation failed");
        exit(1);
    }


    for (i = 0; i < MAX_CHILDREN; i++)
    {
        child_pid[i] = fork();


        if (child_pid[i] == 0)
                {
            close(fd[1]);

            printf("Child Process %d (PID: %d) is waiting for a message...\n", i + 1, getpid());


            if (read(fd[0], message, sizeof(message)) == -1)
            {
                perror("Read from pipe failed");
                exit(1);
            }

            printf("Child Process %d (PID: %d)has received message: %s\n", i + 1, getpid(), message);

            close(fd[0]);

            exit(0);
        }

        else if (child_pid[i] == -1)
        {
            perror("Fork failed");
            exit(1);
        }
    }


    close(fd[0]);

    printf("Parent Process (PID: %d) is ready to send message to child process(es).\n", getpid());

    while (1)
    {
        printf("Enter message to send: ");
        fgets(message, sizeof(message), stdin);

        if (write(fd[1], message, strlen(message)) == -1)
        {
            perror("Write to pipe failed");
            exit(1);
        }

        printf("Parent Process (PID: %d)has sent message: %s", getpid(), message);
    }

    return 0;
}

